# Change to your:
# - board
# - adc sensor ( or remove )
# - wifi
# - uart pins

substitutions:

  dev: EB3test
  name: edpbox3test

interval:

  - interval: 11s
    then:
      - lambda: |-
          if (id(edpbox_polling).state) {
              id(edpbox).update();
          }

esphome:

  name: ${name}

  #platform: ESP32
  #board: esp32dev

  platform: ESP8266
  board: esp07s # 4MB

  on_boot:
    priority: -500
    then:
      - delay: 5s
      - switch.turn_on: edpbox_polling

wifi:

  output_power: 15db
  #domain: .lan
  # use_address: 10.1.0.36
  # fix ota dns error

  ssid: !secret wifi_ssid
  password: !secret wifi_key

  ap:
    ssid: "Easy HAN ${dev}"
    password: !secret wifi_key

captive_portal:

web_server:
  local: true

#logger:
#  level: verbose
#  baud_rate: 0

api:
  reboot_timeout: 45min

ota:

time:

  - platform: homeassistant
    id: esptime

switch:

  - platform: restart
    name: "${dev} ESP Restart"

  - platform: template
    name: "${dev} ESP Polling"
    id: "edpbox_polling"
    optimistic: yes

uart:

# esp32 19/18
# esp8266 3/1
# tfreire 14/5

  id: modbus_serial
  rx_pin: 3
  tx_pin: 1
  baud_rate: 9600
  stop_bits: 1
  #stop_bits: 2 # ziv

modbus:

  #flow_control_pin: 5
  id: modbus1
  uart_id: modbus_serial

modbus_controller:

  - id: edpbox
    update_interval: never
    address: 0x1
    command_throttle: 150ms
    setup_priority: -10

sensor:

  - platform: adc
    # internal VCC esp8266 only
    pin: VCC
    name: "${dev} ESP VCC"
    accuracy_decimals: 3
    device_class: voltage
    state_class: measurement
    update_interval: 12s

  - platform: template
    name: "${dev} ESP Free Heap"
    lambda: |-
      int heap = ESP.getFreeHeap();
      return heap / 1024.0;
    unit_of_measurement: "kB"
    icon: mdi:chip
    state_class: measurement
    update_interval: 12s

  - platform: wifi_signal
    name: "${dev} ESP Signal"
    unit_of_measurement: "dB"
    state_class: measurement

  - platform: uptime
    name: "${dev} ESP Uptime"
    filters:
      - lambda: return x/3600;
    unit_of_measurement: "h"
    accuracy_decimals: 1

### ### ###

### Voltage & Current ###

  - platform: modbus_controller
    name: "${dev} Voltage L1"
    id: VolL1
    address: 0x006C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: voltage
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Voltage L2"
    address: 0x006E
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: voltage
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Voltage L3"
    id: VolL3
    address: 0x0070
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
     - multiply: 0.1
    device_class: voltage
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current"
    address: 0x0072
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    device_class: current
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current L1"
    address: 0x006D
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: current
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current L2"
    address: 0x006F
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: current
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current L3"
    address: 0x0071
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
     - multiply: 0.1
    device_class: current
    state_class: measurement

### Active Power & Export ###

  - platform: modbus_controller
    name: "${dev} Active Power Import"
    address: 0x0079
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L1"
    address: 0x0073
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L2"
    address: 0x0075
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L3"
    address: 0x0077
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power Export"
    address: 0x007A
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

### Power Factor & Frequency ###

  - platform: modbus_controller
    name: "${dev} Power Factor"
    address: 0x007B
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Power Factor L1"
    address: 0x007C
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Power Factor L2"
    address: 0x007D
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Power Factor L3"
    address: 0x007E
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Frequency"
    address: 0x007F
    unit_of_measurement: "Hz"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    icon: "mdi:pulse"
    state_class: measurement

### Total Energy Tariffs ###

  - platform: modbus_controller
    name: "${dev} T1 Vazio"
    address: 0x0026
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller 
    name: "${dev} T2 Ponta"
    address: 0x0027
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller
    name: "${dev} T3 Cheias"
    address: 0x0028
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

### Total Energy ###

  - platform: modbus_controller
    name: "${dev} Import"
    address: 0x0016
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

  - platform: modbus_controller
    name: "${dev} Export"
    address: 0x0017
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy

### Contract ###

  - platform: modbus_controller
    name: "${dev} Contract T1"
    address: 0x000C
    force_new_range: true
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 2
    filters:
      - multiply: 0.001
    unit_of_measurement: "kVA"
    state_class: measurement

### ### ###

text_sensor:

  - platform: template
    name: "${dev} ESP Clock"
    id: esp_clock
    icon: mdi:clock

###

  - platform: modbus_controller
    name: "${dev} Clock"
    register_type: read
    address: 0x0001
    register_count: 1
    response_size: 12
    raw_encode: HEXBYTES
    icon: mdi:clock
    lambda: |-
        uint8_t hh=0,mm=0,ss=0;
        hh = esphome::modbus_controller::byte_from_hex_str(x,5);
        mm = esphome::modbus_controller::byte_from_hex_str(x,6);
        ss = esphome::modbus_controller::byte_from_hex_str(x,7);
        char buffer[20];
        sprintf(buffer,"%02d:%02d:%02d",hh,mm,ss);
        return {buffer};
    on_value:
      - then:
        - lambda: |-
            char str[25];
            time_t currTime = id(esptime).now().timestamp;
            strftime(str, sizeof(str), "%H:%M:%S", localtime(&currTime));
            id(esp_clock).publish_state({str});

###

  - platform: modbus_controller
    name: "${dev} Tariff"
    register_type: read
    address: 0x000B
    register_count: 1
    response_size: 2
    raw_encode: COMMA
    icon: mdi:counter
    lambda: |-
        auto z = "Null";
        if (x == "1,0") z = "Vazio";
        else if (x == "2,0") z = "Ponta";
        else if (x == "3,0") z = "Cheias";
        return {z};

#######
# eof #
#######
