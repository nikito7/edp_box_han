# Config for three phase meter.
# ESP32 is required!
# ESPHome 2022.1
# Change to your wifi and uart pins.

substitutions:

  dev: EB3test
  name: edpbox3test

esphome:

  name: ${name}

  #platform: ESP32
  #board: esp32dev

  platform: ESP8266
  board: esp07s # 4MB

wifi:

  domain: .lan
  #use_address: 10.1.0.40 # fix ota dns error

  ssid: !secret wifi_ssid
  password: !secret wifi_key
#  ssid: my_wifi
#  password: edpbox123

  ap:
    ssid: "Fallback ${dev}"
    password: edpbox123

captive_portal:

web_server:
  css_url: https://nikito7.github.io/s/edpbox-v1.css?4

#logger:
#  level: verbose

api:

  password: !secret api_key

ota:

  password: !secret ota_key

time:

  - platform: homeassistant
    id: esptime

switch:

  - platform: restart
    name: "${dev} ESP Restart"

uart:

  id: modbus_serial
  rx_pin: 3
  tx_pin: 1
  baud_rate: 9600
  stop_bits: 1

modbus:

  #flow_control_pin: 5
  id: modbus1
  uart_id: modbus_serial

modbus_controller:

  - id: edpbox
    update_interval: 9s
    address: 0x1
    command_throttle: 1000ms
    setup_priority: -10

sensor:

  - platform: template
    name: "${dev} ESP Free Heap"
    lambda: |-
      int heap = ESP.getFreeHeap();
      return heap / 1024.0;
    unit_of_measurement: "kB"
    update_interval: 30s
    icon: mdi:chip

  - platform: wifi_signal
    name: "${dev} ESP Signal"
    unit_of_measurement: "dBm"
    update_interval: 30s

  - platform: uptime
    name: "${dev} ESP Uptime"
    filters:
      - lambda: return x/3600;
    unit_of_measurement: "h"
    accuracy_decimals: 1

### ### ###

### Voltage & Current

  - platform: modbus_controller
    name: "${dev} Voltage L1"
    id: VolL1
    address: 0x006C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: voltage

  - platform: modbus_controller
    name: "${dev} Voltage L2"
    address: 0x006E
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: voltage

  - platform: modbus_controller
    name: "${dev} Voltage L3"
    id: VolL3
    address: 0x0070
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
     - multiply: 0.1
    device_class: voltage

  - platform: modbus_controller
    name: "${dev} Current"
    address: 0x0072
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
    device_class: current
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Current L1"
    address: 0x006D
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: current

  - platform: modbus_controller
    name: "${dev} Current L2"
    address: 0x006F
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    device_class: current

  - platform: modbus_controller
    name: "${dev} Current L3"
    address: 0x0071
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
     - multiply: 0.1
    device_class: current

### Active Power & Export

  - platform: modbus_controller
    name: "${dev} Active Power"
    address: 0x0079
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L1"
    address: 0x0073
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L1 Export"
    address: 0x0074
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    internal: true # disable sensor

  - platform: modbus_controller
    name: "${dev} Active Power L2"
    address: 0x0075
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L2 Export"
    address: 0x0076
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    internal: true # disable sensor

  - platform: modbus_controller
    name: "${dev} Active Power L3"
    address: 0x0077
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

  - platform: modbus_controller
    name: "${dev} Active Power L3 Export"
    address: 0x0078
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    internal: true # disable sensor

  - platform: modbus_controller
    name: "${dev} Active Power Export"
    address: 0x007A
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 0
    device_class: power
    unit_of_measurement: "W"
    state_class: measurement

### Power Factor & Frequency

  - platform: modbus_controller
    name: "${dev} Power Factor"
    address: 0x007B
    unit_of_measurement: "pu"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor

  - platform: modbus_controller
    name: "${dev} Power Factor L1"
    address: 0x007C
    unit_of_measurement: "pu"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor

  - platform: modbus_controller
    name: "${dev} Power Factor L2"
    address: 0x007D
    unit_of_measurement: "pu"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor

  - platform: modbus_controller
    name: "${dev} Power Factor L3"
    address: 0x007E
    unit_of_measurement: "pu"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    device_class: power_factor

  - platform: modbus_controller
    name: "${dev} Frequency"
    address: 0x007F
    unit_of_measurement: "Hz"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    icon: "mdi:pulse"

### Total Energy Tariffs

  - platform: modbus_controller
    name: "${dev} T1 Vazio"
    address: 0x0026
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy
    skip_updates: 3

  - platform: modbus_controller 
    name: "${dev} T2 Ponta"
    address: 0x0027
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy
    skip_updates: 3

  - platform: modbus_controller
    name: "${dev} T3 Cheias"
    address: 0x0028
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy
    skip_updates: 3

### Total Energy

  - platform: modbus_controller
    name: "${dev} Import"
    address: 0x0016
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy
    skip_updates: 3

  - platform: modbus_controller
    name: "${dev} Export"
    address: 0x0017
    register_type: read
    value_type: U_DWORD
    register_count: 1
    response_size: 4
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    state_class: total_increasing
    device_class: energy
    skip_updates: 3

### ### ###

  - platform: template
    name: "${dev} Voltage L1-10"
    lambda: 'return id(VolL1).state - 10.0;'
    unit_of_measurement: "V"
    update_interval: 10s
    device_class: voltage

  - platform: template
    name: "${dev} Voltage L3+10"
    lambda: 'return id(VolL3).state + 10.0;'
    unit_of_measurement: "V"
    update_interval: 10s
    device_class: voltage

### ### ###

text_sensor:

  - platform: template
    name: "${dev} ESP Clock"
    id: esp_clock
    icon: mdi:clock

###

  - platform: modbus_controller
    name: "${dev} Clock"
    register_type: read
    address: 0x0001
    register_count: 1
    response_size: 12
    raw_encode: HEXBYTES
    icon: mdi:clock
    lambda: |-
        uint8_t hh=0,mm=0,ss=0;
        hh = esphome::modbus_controller::byte_from_hex_str(x,5);
        mm = esphome::modbus_controller::byte_from_hex_str(x,6);
        ss = esphome::modbus_controller::byte_from_hex_str(x,7);
        char buffer[20];
        sprintf(buffer,"%02d:%02d:%02d",hh,mm,ss);
        return {buffer};
    on_value:
      - then:
        - lambda: |-
            char str[25];
            time_t currTime = id(esptime).now().timestamp;
            strftime(str, sizeof(str), "%H:%M:%S", localtime(&currTime));
            id(esp_clock).publish_state({str});

###

  - platform: modbus_controller
    name: "${dev} Tariff"
    register_type: read
    address: 0x000B
    register_count: 1
    response_size: 2
    raw_encode: COMMA
    icon: mdi:counter
    lambda: |-
        auto z = "Null";
        if (x == "1,0") z = "Vazio";
        else if (x == "2,0") z = "Ponta";
        else if (x == "3,0") z = "Cheias";
        return {z};

###

#######
# eof #
#######
